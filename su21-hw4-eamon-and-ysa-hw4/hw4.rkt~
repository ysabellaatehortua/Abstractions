#lang racket

(require "TreeDataType.rkt")

; Eamon McKeon and Ysa Atehortua

; Export all of our top-level definitions so that tests.rkt
; can import them. See tests.rkt.

(provide (all-defined-out))

; PART 1

; index

(define (index x lst)
  (second (foldr (位 (head result)
           (let ([current-idx (sub1 (first result))]
                 [found-idx (second result)])
             (if (equal? head x) (list current-idx current-idx)
                 (list current-idx found-idx))))
         (list (length lst) -1) lst)))


; replace

(define (replace a b lst)
  (foldr (位 (head result)
           (if (equal? head a) (cons b result) (cons head result)))
         empty lst))


; weigh

(define bags
  '((duffle 8)
    (garment-bag 2)
    (briefcase 5)
    (valise 7)
    (steamer-trunk 65)))

(define (weigh bags)
  (foldr (位 (bag sum)
           (+ (second bag) sum))
         0 bags))


; heaviest

(define (heaviest bags)
  (first (foldr (位 (bag heaviest)
           (if (>= (second bag) (second heaviest)) bag heaviest))
         '(0 0) bags)))


; PART 2

; child-sum

(define (child-sum t)
  (if (empty-tree? t) 0 (apply + (map second (tree-children t)))))
